resources:
- name: code
  type: git
  source:
    uri: https://github.com/meAmidos/dcind

- name: redis
  type: docker-image
  source:
    repository: redis
    tag: alpine

- name: busybox
  type: docker-image
  source:
    repository: busybox

jobs:
- name: unit-tests
  plan:
  - get: code
    params: { depth: 1 }
  - task: run_unit_tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: busybox
      inputs:
      - name: code
      run:
        path: sh
        args:
        - -exc
        - |
          ./code/example/unit-tests.sh

- name: integration
  plan:
  - get: code
    params: { depth: 1 }
    # passed: [unit-tests]
    trigger: true
  - get: redis
    params: { save: true }
  - get: busybox
    params: { save: true }
  - task: run_integration_tests
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: amidos/dcind
      inputs:
      - name: code
      - name: redis
      - name: busybox
      run:
        path: bash
        args:
        - -exc
        - |
          source /docker-lib.sh
          start_docker

          # Strictly speaking, preloading of Docker images is not required.
          # However, you might want to do this for a couple of reasons:
          # - If the image comes from a private repository, it is much easier to let Concourse pull it,
          #   and then pass it through to the task.
          # - When the image is passed to the task, Concourse can often get the image from its cache.
          docker load -i redis/image
          docker tag "$(cat redis/image-id)" "$(cat redis/repository):$(cat redis/tag)"

          docker load -i busybox/image
          docker tag "$(cat busybox/image-id)" "$(cat busybox/repository):$(cat busybox/tag)"

          # This is just to visually check in the log that images have been loaded successfully.
          docker images

          # Run the container with tests and its dependencies.
          docker-compose -f code/example/integration.yml run tests

          # Cleanup.
          # Not sure if this is required.
          # It's quite possible that Concourse is smart enough to clean up the Docker mess itself.
          docker volume rm $(docker volume ls -q)
